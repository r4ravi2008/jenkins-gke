#+TITLE: Jenkins Tutorial
* Google Account Setup
** DONE Create Project
Jenkins-project
*** Install google cloud sdk
**** Link goougle cloud sdk with google account
#+begin_src bash
gcloud init
#+end_src
** DONE Setup kubernetes.
*** Create Kubernetes cluster
**** Create cluster
#+begin_src bash
gcloud container clusters create jenkins-cluster \
  --machine-type n1-standard-2 --num-nodes 2 \
  --scopes "https://www.googleapis.com/auth/source.read_write,cloud-platform" \
#+end_src
**** Get cluster credentials

#+begin_src bash
gcloud container clusters get-credentials jenkins-cluster
#+end_src
*** Install =kubectl=
**** List cluster
#+begin_src bash
kubectl cluster-info
#+end_src

** DONE Setup Jenkins on Kubernetes.
*** DONE Install Helm.
**** From documentation
*** DONE Install Jenkins helm app.
**** Create cluster binding role for jenkins
#+begin_src bash
kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin \
        --user=$(gcloud config get-value account)
#+end_src
**** Create jenkins-values.yaml. Reference [[file:jenkins-values.yaml][here]].
**** Helm install jenkins
#+begin_src bash
helm install jenkins -f jenkins-values.yaml jenkinsci/jenkins
#+end_src
**** Setup jenkins
***** Login to Jenkins
To login you need to portforward to localhost from pod.
#+begin_src bash
kubectl port-forward jenkins-0 8080:8080 >> /dev/null
#+end_src
***** DONE Manage plugins to install latest versions
** DONE Create Java repo.
https://github.com/r4ravi2008/jenkins-java-repo/blob/main/Jenkinsfile#L2
** DONE Create Access token for Jenkins
Create an oauth token with read permissions
** TODO Integrate Jenkins with Java Repo on github.
*** DONE Install Github plugins
*** DONE CICD - Jenkinsfile
Below jenkins file shows how to use a Kubernetes agent to run mvn build.
#+begin_src groovy
pipeline {
    agent {
        kubernetes {
            // Use a dynamic pod name because static labels are known to cause pod creation errors.
            label "maven-pod-${UUID.randomUUID().toString()}"
            defaultContainer "jnlp"
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: zoltar-batch-offline
spec:
  containers:
  - name: maven
    image: 'maven:3.5.3-jdk-8'
    command:
    - cat
    tty: true
"""
        }
     }
    environment {
        AUTHOR_EMAIL = sh(script: "git log --format='%ae' HEAD^!", returnStdout: true).trim()
    }
    options {
        // timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '50', artifactDaysToKeepStr: '30', artifactNumToKeepStr: '50'))
    }
    stages {
        stage('build-test') {
            steps {
                container('maven') {
                    sh '''
                        export M3_HOME=${MAVEN_HOME}/bin
                        mvn clean install
                    '''
                }
            }
        }

    }
    // post {
    //     success {
    //         echo "Java repo build Success"
    //         mail to: "${AUTHOR_EMAIL}",
    //              subject: "Build Success: ${currentBuild.fullDisplayName}",
    //              body: "Build was Successful : ${env.BUILD_URL}"
    //     }
    //     failure {
    //         echo "Java repo build Failure"
    //         script {
    //             if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'develop' || env.BRANCH_NAME == 'release/*') {
    //                 emailext (
    //                     to: env.SLACK_EMAIL,
    //                     subject: "Build failure for branch ${env.BRANCH_NAME}: Needs atention",
    //                     body: "Build failure for branch ${env.BRANCH_NAME}. URL ${env.BUILD_URL}",
    //                     attachLog: false,
    //                     )
    //             }
    //         }
    //         mail to: "${AUTHOR_EMAIL}",
    //                 subject: "Failed build: ${currentBuild.fullDisplayName}",
    //                 body: "Something is wrong in ${env.BUILD_URL}"
    //     }
    // }
}


#+end_src
** TODO Integrate security tool - Zap with Jenkins.
*** DONE PR with security tools using jenkins build.
**** Build Docker zap image:
#+begin_src bash
# pull image
docker pull owasp/zap2docker-stable

# start zap proxy
docker run --name zap -u zap -v "$(pwd)/reports":/zap/reports/:rw \
  -i owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080 \
  -config api.addrs.addr.name=.\* -config api.addrs.addr.regex=true \
  -config api.disablekey=true

#+end_src

First off as you can see - the vanilla zap docker image has a long command to start zap proxy. Having a long command can make it hard to invoke it in a `pods.yaml`. So lets automate the start up of zap proxy by creating a layer on top the original zap2docker image.

Create a =ZapDockerfile= with following contents

#+begin_src
FROM owasp/zap2docker-stable
USER zap
EXPOSE 8080
ENTRYPOINT ["zap.sh", "-daemon", "-host", "0.0.0.0", "-port", "8080", "-config", "api.addrs.addr.name=.*", "-config", "api.addrs.addr.regex=true", "-config", "api.disablekey=true"]
#+end_src

Now build docker image.
#+begin_src
# Build image. Make sure to create a docker account and setup locally.
docker build -t <your-docker-login>/zapdocker -f ZapDockerFile .

#Push image. Replace the
docker push <your-docker-login>/zapdocker
#+end_src

***** Test Zap Locally
#+begin_src bash
# Run docker image. This automatically starts Zap proxy.
docker run -v "reports":/zap/reports/:rw -n zap  <your-docker-login>/zapdocker

# Run quick scan using zap cli
docker exec zap zap-cli --verbose quick-scan http://www.itsecgames.com -l Medium

# Export report scan using zap cli
docker exec zap zap-cli --verbose report -o /zap/reports/owasp-quick-scan-report.html --output-format html
#+end_src


***** Create pods.yaml that will be used in jenkins
#+begin_src yaml
apiVersion: v1
kind: Pod
metadata:
  name: zap-proxy
spec:
  containers:
  - name: maven
    image: 'maven:3.5.3-jdk-8'
    command:
    - cat
    tty: true
    volumeMounts:
      - name: shared-build-output
        mountPath: /var/run/outputs
  - name: zap
    image: '<your-docker-login>/zapdocker'
    volumeMounts:
      - name: shared-build-output
        mountPath: /zap/reports/:rw
    tty: true
    ports:
       - containerPort: 8080
  volumes:
    - name: shared-build-output
      emptyDir: {}

#+end_src
***** Update Jenkins file to use above pods.yaml. Reference [[https://github.com/r4ravi2008/jenkins-java-repo/blob/main/Jenkinsfile#L1][here]].

#+begin_src groovy
pipeline {
    agent {
        kubernetes {
            // Use a dynamic pod name because static labels are known to cause pod creation errors.
            label "maven-pod-${UUID.randomUUID().toString()}"
            defaultContainer "maven"
            yamlFile 'pods.yaml'
        }
     }
    environment {
        AUTHOR_EMAIL = sh(script: "git log --format='%ae' HEAD^!", returnStdout: true).trim()
    }
    options {
        // timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '50', artifactDaysToKeepStr: '30', artifactNumToKeepStr: '50'))
    }
    stages {
        stage('build-test') {
            steps {
                container('maven') {
                    sh '''
                        export M3_HOME=${MAVEN_HOME}/bin
                        mvn clean install
                    '''
                }
            }
        }

        // stage ('deploy') {
        //    // public url
        // }

        stage ('zap-scan') {
            post {
                always {
                    container ('zap') {
                        sh '''
                        zap-cli --verbose report -o ./owasp-quick-scan-report.html --output-format html
                        ls -lah
                        '''
                    }
                    publishHTML target: [
                        allowMissing         : false,
                        alwaysLinkToLastBuild: false,
                        keepAll              : true,
                        reportDir            : './',
                        reportFiles          : 'owasp-quick-scan-report.html',
                        reportName           : 'Zap Scan Report'
                    ]
                }
            }
            steps {
                container('zap') {
                    // Update the target and scan types as per your needs.
                    // Documentation here: https://www.zaproxy.org/docs/docker/about/
                   sh '''
                       zap-cli --verbose quick-scan http://www.itsecgames.com
                   '''

                }
            }
        }
    }

#+end_src

** Run job. Kick off job from jenkins using "build now"
